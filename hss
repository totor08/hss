#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Sqlite3 database location
bdd = "~/.config/hss/hss.db"
# table name containing datas
table = "item"

import sqlite3,sys,re,os

def usage():
    print("""usage :
    -l | --list [pattern]            display all bdd entries. optional pattern : ex c*, ex *a, ex *V*, ex c?al
    -a | --add shortcut user@url[/path]:port (ex servlog foo@bar.tld/var/log:22)
    -d | --delete shortcut           remove entry
    -r | --rename shortcut shortcut|user|url|port=newValue (ex shortcut=myconnection or url=newdomain.tld/home/test)
    -s | --scp shortcut              display scp command line for the given shortcut
    -h | --help                      display this help
""")

def open_bdd():
    global conn,cur,bdd
    # check if database is present
    bdd=os.path.expanduser(bdd)
    if not os.path.isfile(bdd):
        print("database {} not found !".format(bdd))
        print("create database (y/n)? ",end="")
        result=input()
        if result=='y' or result=='Y':
            # creating folder and subfolder
            os.makedirs(os.path.dirname(bdd), exist_ok=True)
            # database connection, create it if it does’nt exist
            conn=sqlite3.connect(bdd)
            conn.row_factory = sqlite3.Row
            # table creation with constraint on shortcut which must be unique
            conn.execute("CREATE TABLE "+table+" ( shortcut text UNIQUE, user text, url text, port integer);")
            conn.commit()
            conn.close()
        else:
            print("Abandon…")
            quit()

    conn=sqlite3.connect(bdd)
    conn.row_factory = sqlite3.Row
    cur=conn.cursor()

def too_much(v,n):
    # check numbers of parameters
    if len(v)>n:
        print("too much parameters.")
        quit()
    elif len(v)<n:
        print("missing parameter(s).")
        quit()

def list_entries(v):
    global conn,cur
    l=len(v)
    if l>3:
        print("too much parameters.")
        quit()
    if l==3:
        pattern=v[2].replace("*","%").replace("?","_")
    else:
        pattern="%"
    open_bdd()
    # list shortcut, user, url & port as a table
    cur.execute("select max(length(shortcut)),max(length(user)),max(length(url)),max(length(port)) from item")
    rows=cur.fetchall()
    row=rows[0]
    scl=row[0]   # shortcut max length
    if scl != None:
        if scl < 8 :
            scl = 8

        usl=row[1]   # user max length
        if usl < 4 :
            usl = 4

        url=row[2]   # url max length
        if url < 3 :
            url = 3

        pol=row[3]   # port max length
        if pol < 4 :
            pol = 4

        separateur="-"*(scl+usl+url+pol+5)
        fmt="|{shortcut:"+str(scl)+"}|{user:"+str(usl)+"}|{url:"+str(url)+"}|{port:"+str(pol)+"}|"

        cur.execute(f"select * from item where shortcut like '{pattern}' order by shortcut;")
        rows=cur.fetchall()
        if len(rows) != 0:
            print(separateur)
            print(fmt.format(shortcut="shortcut",user="user",url="url",port="port"))
            print(separateur)
            for row in rows:
                print(fmt.format(shortcut=row["shortcut"],user=row["user"],url=row["URL"],port=row["port"]))
            print(separateur)
    else:
        print("Empty database")
    conn.close()

def remove_entry(v):
    global conn,cur
    too_much(v,3)
    open_bdd()
    entry=v[2]
    # remove entry from BDD
    sql="delete from "+table+" where shortcut='"+entry+"';"
    conn.execute(sql)
    conn.commit()
    print("Entry removed !")
    conn.close()

def add_entry(v):
    global conn,cur
    too_much(v,4)
    entry=v[3]
    shortcut=v[2]
    open_bdd()
    # entry format -> shortcut:user@url:port
    # does shortcut already exists ?

    # regex to capture groups (shortcut, user, url, port)
    pattern = r"^(?P<user>\w+)@(?P<url>.*):(?P<port>\d+)$"

    # Apply regex on entry
    match = re.match(pattern, entry)

    # if matching, extract values into variables
    if match:
        user = match.group('user')
        url  = match.group('url')
        port = match.group('port')
        # writing to bdd
        sql = "insert into "+table+"(shortcut,user,url,port) values(?,?,?,?);"
        conn.execute(sql,(shortcut,user,url,port))
        conn.commit()
    else:
        print("Syntax Error !")
    conn.close()

def rename(v):
    global conn,cur
    too_much(v,4)
    shortcut=v[2]
    command=v[3]
    open_bdd()
    l = command.split("=",1)
    if len(l) != 2:
        print("rename not possible")
    else:
        field = l[0]
        value = l[1]
        if field in ["shortcut","user","url","port"]:
            if field != "port":
                value="'"+l[1]+"'"
            conn.execute(f"update {table} set {field}={value} where shortcut='{shortcut}'")
            conn.commit()
        else:
            print("unknown field")
    conn.close()

def ssh_exec(v):
    global conn,cur
    too_much(v,2)
    shortcut=v[1]
    open_bdd()
    # searching for shortcut in database
    sql = "select * from " + table + " where shortcut='" + shortcut + "';"
    cur.execute(sql)
    rows=cur.fetchall()
    # we must only have one result
    if len(rows) == 1:
        row = rows[0]
        # splitting path from url
        l=row["URL"].split("/",1)
        # if using brackets (ipv6), they are stripped
        l[0]=l[0].rstrip("]").lstrip("[")
        if len(l)==1 :
            commande = "ssh -p {port} -t {user}@{url}"
            commande = commande.format(user=row["user"],url=l[0],port=row["port"])
        else:
            commande = "ssh -p {port} -t {user}@{url} 'cd /{chemin}; exec $SHELL -l'"
            commande = commande.format(user=row["user"],url=l[0], chemin=l[1],port=row["port"])
        # display command on screen before executing
        print(commande)
        # execute command
        os.system(commande)
    else:
        print("shortcut {} not found".format(shortcut))
    conn.close()

def display_scp(v):
    global conn,cur
    too_much(v,3)
    shortcut=v[2]
    open_bdd()
    # searching for shortcut in database
    sql = "select * from " + table + " where shortcut='" + shortcut + "';"
    cur.execute(sql)
    rows=cur.fetchall()
    # we must only have one result
    if len(rows) == 1:
        row = rows[0]
        # splitting path from url
        l=row["URL"].split("/",1)
        # if using brackets (ipv6), adding \ before any bracket
        l[0]=l[0].replace("[","\[").replace("]","\]")
        if len(l)==1 :
            commande = "scp -P {port} {user}@{url}"
            commande = commande.format(user=row["user"],url=l[0],port=row["port"])
        else:
            commande = "scp -P {port} {user}@{url}:/{chemin}"
            commande = commande.format(user=row["user"],url=l[0], chemin=l[1],port=row["port"])
        # display scp command on screen
        print(commande)
    else:
        print("shortcut {} not found".format(shortcut))
    conn.close()

# getting arguments from command line
v=sys.argv

# check commands from arguments
if len(v)>1 :
    c = v[1]
    if c in ["--add","-a"]:
        add_entry(v)
    elif c in ["--delete","-d"]:
        remove_entry(v)
    elif c in ["--scp","-s"]:
        display_scp(v)
    elif c in ["--list","-l"]:
        list_entries(v)
    elif c in ["--help","-h"]:
        usage()
    elif c in ["--rename","-r"]:
        rename(v)
    elif c[0] != "-":
        ssh_exec(v)
    else:
        usage()
else:
    usage()
